#!/bin/sh

# Static configuration (defaults)
PROTOCOL="https"              # Protocol to use for the API
ENDPOINT="api.upcloud.com"    # API endpoint to use
VERSION="1.2"                 # API version to use
API_RESOURCES="server"        # Space separated known API objects (to filter what is our data and what is the API data)
PACKER_STATES="states/roles/" # Relative path (from the execution path) to the location of the `packerstate` files.
DEBUG=1

# Internal variables - do not modify for configuration, no modification should be required.
dependencies="curl jq sed"
valid_keys="$(echo $API_RESOURCES | sed 's/ /\\|/g;')"
stdin=""

# Functions
substitute_real_disks() { # Expected args: $1 json of the resource
	json="$1"
	real_devices="$(echo "$json" | jq -c '.storage_devices.storage_device[]' | while read line
		do
			if [ "$(echo "$line" | jq -c 'keys')" = '["role"]' ]; then
				role="$(echo "$line" | jq -c '.role' | tr -d '"')"
				file_to_load="$PACKER_STATES$role.packerstate"
				storage_id="$(sed '/UUID/!d; s/^.*(UUID: \([0-9a-f-]\+\),.*)$/\1/' "$file_to_load")"
				echo -n '{"action":"clone", "storage":"'"$storage_id"'", "title":"'"$role-packer-image"'", "tier": "maxiops"},'
			else
				echo -n "$line,"
			fi
		done | sed 's/,$//'
	)"
	echo "$json" | jq ".storage_devices.storage_device=[$real_devices]"
}

API_Call() { # Expected args: $1 name of resource, $2 json of resource.
	case "$1" in
		"server")
			curl -SsL $PROTOCOL://$UPCLOUD_AUTOMATION_USER:$UPCLOUD_AUTOMATION_PASSWORD@$ENDPOINT/$VERSION/$1 | jq -c ".servers.server[]" | while read server; do
				hostname="$(echo "$2" | jq ".hostname")"
				[ "$(echo "$server" | jq ".hostname")" = "$hostname" ] && echo "Server $hostname is already existing. Skipping." >&2 && exit 1 # We're in a subshell, let's exit
			done && echo "{\"$1\": $(substitute_real_disks "$2")}" | curl -X POST -d@- --header "Content-Type:application/json" -SsL $PROTOCOL://$UPCLOUD_AUTOMATION_USER:$UPCLOUD_AUTOMATION_PASSWORD@$ENDPOINT/$VERSION/$1 || true
			;;
		*)
			echo "$1 resource isn't implemented yet." >&2
			;;
	esac
}

usage() { # Expected args: $1 exit code to use.
	cat >&2 <<-USAGE
	$0 [options]
	Provisions a configuration passed to stdin in upcloud.

	  -q Quiet mode
	  -h this help

	USAGE
	exit $1
}

check_for_dependencies() {
	for dependency in $dependencies; do
		command -v $dependency >/dev/null || { echo "The dependency '$dependency' was not found on this system. Please install it. Aborting."; exit 1; }
	done
}

dbg() { # Expected args: Any number of args to display
	[ $DEBUG -eq 1 ] && echo $@ >&2
}

# Script's main entry point
## Parse flags and set runtime configuration
check_for_dependencies

while true; do
	case $1 in
	"-q")   DEBUG=0;;
	"-h")   usage 0;;
	"--")   break;;
	"-"*)   usage 2;;
	*|"")   break;; # Stop processing when non-flag is reached.
	esac
	shift
done

## Ensure that we can call the API
[ $(curl -SsL -o /dev/null -w "%{http_code}" $PROTOCOL://$UPCLOUD_AUTOMATION_USER:$UPCLOUD_AUTOMATION_PASSWORD@$ENDPOINT/$VERSION/account) -ne 200 ] && echo "User $UPCLOUD_AUTOMATION_USER isn't allowed to call the API. Aborting." >&2 && exit 1

## Read the resources
dbg "Reading from stdin..."
while read line; do
	stdin="$stdin$line"
done
dbg "stdin closed"

## Parse the resources
echo $stdin | jq -c '.[]' | while read resource; do
	resource_type=$(echo "$resource" | jq -c 'keys' | sed 's/^\[//; s/\]$//; s/"//g; s/,/\n/g;' | sed '/^\('$valid_keys'\)$/!d')
	[ $(echo $resource_type | wc -l) -gt 1 ] && echo "Too many resource types in $resource" >&2 && continue
	API_Call "$resource_type" "$(echo $resource | jq ".$resource_type")"
done
